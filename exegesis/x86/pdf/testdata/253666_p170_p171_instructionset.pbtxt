instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m16"
      usage: USAGE_READ
    }
    operands {
      encoding: MODRM_REG_ENCODING
      name: "r16"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: true
  encoding_scheme: "MR"
  raw_encoding_specification: "0F A3 /r"
  instruction_group_index: 0
}
instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m32"
      usage: USAGE_READ
    }
    operands {
      encoding: MODRM_REG_ENCODING
      name: "r32"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: true
  encoding_scheme: "MR"
  raw_encoding_specification: "0F A3 /r"
  instruction_group_index: 0
}
instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m64"
      usage: USAGE_READ
    }
    operands {
      encoding: MODRM_REG_ENCODING
      name: "r64"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: false
  encoding_scheme: "MR"
  raw_encoding_specification: "REX.W + 0F A3 /r"
  instruction_group_index: 0
}
instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m16"
      usage: USAGE_READ
    }
    operands {
      encoding: IMMEDIATE_VALUE_ENCODING
      name: "imm8"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: true
  encoding_scheme: "MI"
  raw_encoding_specification: "0F BA /4 ib"
  instruction_group_index: 0
}
instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m32"
      usage: USAGE_READ
    }
    operands {
      encoding: IMMEDIATE_VALUE_ENCODING
      name: "imm8"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: true
  encoding_scheme: "MI"
  raw_encoding_specification: "0F BA /4 ib"
  instruction_group_index: 0
}
instructions {
  description: "Store selected bit in CF flag."
  vendor_syntax {
    mnemonic: "BT"
    operands {
      encoding: MODRM_RM_ENCODING
      name: "r/m64"
      usage: USAGE_READ
    }
    operands {
      encoding: IMMEDIATE_VALUE_ENCODING
      name: "imm8"
      usage: USAGE_READ
    }
  }
  available_in_64_bit: true
  legacy_instruction: false
  encoding_scheme: "MI"
  raw_encoding_specification: "REX.W + 0F BA /4 ib"
  instruction_group_index: 0
}
instruction_groups {
  name: "BT"
  short_description: "Bit Test"
  description: "Selects the bit in a bit string (specified with the first operand, called the bit base) at the bit-position designated by the bit offset (specified by the second operand) and stores the value of the bit in the CF flag. The bit base operand can be a register or a memory location; the bit offset operand can be a register or an immediate value:\n\342\200\242\tIf the bit base operand specifies a register, the instruction takes the modulo 16, 32, or 64 of the bit offset operand (modulo size depends on the mode and register size; 64-bit operands are available only in 64-bit mode).\n\342\200\242\tIf the bit base operand specifies a memory location, the operand represents the address of the byte in memory that contains the bit base (bit 0 of the specified byte) of the bit string. The range of the bit position that can be referenced by the offset operand depends on the operand size.\nSee also: Bit(BitBase, BitOffset) on page 3-10.\nSome assemblers support immediate bit offsets larger than 31 by using the immediate bit offset field in combination with the displacement field of the memory operand. In this case, the low-order 3 or 5 bits (3 for 16-bit operands, 5 for 32-bit operands) of the immediate bit offset are stored in the immediate bit offset field, and the highorder bits are shifted and combined with the byte displacement in the addressing mode by the assembler. The processor will ignore the high order bits if they are not zero.\nWhen accessing a bit in memory, the processor may access 4 bytes starting from the memory address for a 32-bit operand size, using by the following relationship:\nEffective Address + (4 \342\210\227 (BitOffset DIV 32))\nOr, it may access 2 bytes starting from the memory address for a 16-bit operand, using this relationship:\nEffective Address + (2 \342\210\227 (BitOffset DIV 16))\nIt may do so even when only a single byte needs to be accessed to reach the given bit. When using this bit addressing mechanism, software should avoid referencing areas of memory close to address space holes. In particular, it should avoid references to memory-mapped I/O registers. Instead, software should use the MOV instructions to load from or store to these addresses, and use the register form of these instructions to manipulate the data.\nIn 64-bit mode, the instruction\342\200\231s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bit operands. See the summary chart at the beginning of this section for encoding data and limits."
  flags_affected {
    content: "The CF flag contains the value of the selected bit. The ZF flag is unaffected. The OF, SF, AF, and PF flags are undefined."
  }
}
